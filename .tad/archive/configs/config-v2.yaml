# TAD Configuration v2.0 - 基于BMAD研究的改进版本
method: TAD
version: 2.0
description: Triangle Agent Development - 从BMAD学习但保持简单

# ==================== 核心模型 ====================
triangle:
  human:
    role: Value Guardian
    责任:
      - 定义价值和需求
      - 验证交付价值
      - 做关键决策

  agent_a:
    name: Alex
    role: Strategic Architect
    terminal: 1
    模式:
      - 需求分析
      - 方案设计
      - 质量审查

  agent_b:
    name: Blake
    role: Execution Master
    terminal: 2
    模式:
      - 代码实现
      - 测试验证
      - 部署运维

# ==================== Sub-agents配置 ====================
# 这些是Claude Code真实提供的sub-agents，不是虚构的
subagents:
  # Agent A主要调用（战略性）
  strategic:
    product-expert:
      model: sonnet
      用途: 需求分析、用户故事编写
    backend-architect:
      model: opus  # 需要深度思考
      用途: 系统架构设计、技术选型
    api-designer:
      model: sonnet
      用途: API设计、接口规范
    code-reviewer:
      model: opus  # 需要深度思考
      用途: 代码质量审查、最佳实践
    ux-expert-reviewer:
      model: sonnet
      用途: UX评估、用户体验优化
    performance-optimizer:
      model: opus  # 需要深度思考
      用途: 性能分析、优化方案
    data-analyst:
      model: sonnet
      用途: 数据分析、报告生成

  # Agent B主要调用（执行性）
  execution:
    parallel-coordinator:
      model: sonnet
      用途: 并行任务协调、多agent编排
    fullstack-dev-expert:
      model: sonnet
      用途: 全栈开发、前后端集成
    frontend-specialist:
      model: sonnet
      用途: 前端开发、UI实现
    refactor-specialist:
      model: sonnet
      用途: 代码重构、技术债清理
    bug-hunter:
      model: sonnet
      用途: 问题诊断、bug定位
    test-runner:
      model: sonnet
      用途: 测试执行、覆盖率分析
    devops-engineer:
      model: sonnet
      用途: 部署配置、CI/CD
    database-expert:
      model: sonnet
      用途: 数据库设计、查询优化
    docs-writer:
      model: sonnet
      用途: 文档编写、API文档

# ==================== 场景工作流 ====================
scenarios:
  # 场景1：全新项目启动
  new_project:
    触发: "没有任何代码，从零开始"
    agent_a_steps:
      - name: 需求梳理
        调用: product-expert
        输入: Human的初步想法
        输出: .tad/context/REQUIREMENTS.md

      - name: 产品定义
        调用: [product-expert, ux-expert-reviewer]
        输入: REQUIREMENTS.md
        输出: .tad/context/PRD.md

      - name: 架构设计
        调用: backend-architect
        输入: PRD.md
        输出: .tad/context/ARCHITECTURE.md

      - name: Sprint规划
        输出: .tad/working/sprint-1.md

    agent_b_steps:
      - name: 项目初始化
        调用: devops-engineer
        任务: 创建项目结构、配置环境
        输出: 项目框架代码

      - name: MVP实现
        调用: parallel-coordinator
        协调:
          - frontend-specialist: 创建基础UI
          - fullstack-dev-expert: 实现核心API
          - database-expert: 设置数据库
          - test-runner: 编写基础测试
        输出: 可运行的MVP代码

    human_验证:
      - 需求理解正确？
      - 产品定义符合预期？
      - 技术方案可行？
      - MVP功能完整？

  # 场景2：添加新功能
  add_feature:
    触发: "项目已在运行，需要新功能"
    agent_a_steps:
      - name: 功能分析
        调用: product-expert
        输出: .tad/working/feature-analysis.md

      - name: 设计方案
        调用: [api-designer, backend-architect]
        输出: .tad/working/feature-design.md

      - name: Sprint计划
        输出: .tad/working/current-sprint.md

    agent_b_steps:
      - name: 影响评估
        调用: code-reviewer
        输出: 影响代码列表

      - name: 功能开发
        调用: fullstack-dev-expert
        输出: 新功能代码

      - name: 集成测试
        调用: test-runner
        输出: 测试报告

  # 场景3：Bug修复
  bug_fix:
    触发: "发现问题，需要修复"
    agent_a_steps:
      - name: 问题分析
        输出: .tad/working/bug-analysis.md

      - name: 修复方案
        调用: backend-architect  # 如果是架构问题
        输出: .tad/working/fix-plan.md

    agent_b_steps:
      - name: 定位问题
        调用: bug-hunter
        输出: 问题定位报告

      - name: 实施修复
        调用: 相应的specialist
        输出: 修复补丁

      - name: 验证修复
        调用: test-runner
        输出: 验证报告

  # 场景4：性能优化
  performance:
    触发: "响应慢，资源消耗高"
    agent_a_steps:
      - name: 性能诊断
        调用: performance-optimizer
        输出: .tad/working/performance-diagnosis.md

      - name: 优化方案
        调用: backend-architect
        输出: .tad/working/optimization-plan.md

    agent_b_steps:
      - name: 实施优化
        调用: refactor-specialist
        任务: 重构瓶颈代码

      - name: 性能测试
        调用: performance-optimizer
        输出: 性能对比报告

  # 场景5：代码重构
  refactoring:
    触发: "技术债累积，需要重构"
    agent_a_steps:
      - name: 重构评估
        调用: code-reviewer
        输出: .tad/working/refactor-assessment.md

      - name: 重构计划
        输出: .tad/working/refactor-plan.md

    agent_b_steps:
      - name: 渐进重构
        调用: refactor-specialist
        原则:
          - 保持功能不变
          - 小步快跑
          - 持续测试

  # 场景6：部署上线
  deployment:
    触发: "功能完成，准备发布"
    agent_a_steps:
      - name: 发布准备
        输出: .tad/working/release-checklist.md

    agent_b_steps:
      - name: 部署执行
        调用: devops-engineer
        任务: 配置CI/CD、执行部署

      - name: 上线验证
        调用: test-runner
        任务: 生产环境验证

# ==================== 文档管理 ====================
documents:
  # 简单的两层结构
  structure:
    context/: 长期保存的项目信息
    working/: 当前工作文档

  # 核心文档（始终维护）
  core:
    - PROJECT.md: 项目单一真相源
    - REQUIREMENTS.md: 需求文档
    - ARCHITECTURE.md: 架构决策
    - DECISIONS.md: 重要决策记录

  # 工作文档（按需创建和清理）
  working:
    - current-sprint.md: 当前Sprint（只保留一个）
    - execution-report.md: 最新执行报告
    - feature-*.md: 功能相关文档
    - bug-*.md: Bug分析文档
    - performance-*.md: 性能相关文档

  # 文档原则
  principles:
    - 保持简单，不要过度文档化
    - 及时更新，过时立即删除
    - 关注价值，不写没用的文档

# ==================== 验证机制 ====================
verification:
  # 第一层：技术验证（Agents负责）
  technical:
    gates:
      - 代码能运行
      - 测试通过
      - 无明显bug
      - 性能可接受

  # 第二层：价值验证（Human负责）
  value:
    gates:
      - 解决了真实问题
      - 用户能感知价值
      - 符合业务目标
      - 体验令人满意

# ==================== 扩展规则 ====================
scaling:
  # 小任务：口头沟通即可
  small:
    时长: <2小时
    文档: 不需要或最小化
    验证: 快速检查

  # 中任务：轻量文档
  medium:
    时长: 2-8小时
    文档: current-sprint.md
    验证: checkpoint检查

  # 大任务：完整流程
  large:
    时长: >1天
    文档: 完整的设计和报告
    验证: 正式的双层验证

# ==================== 激活和使用 ====================
activation:
  # Agent A激活
  agent_a:
    命令: "Read .tad/agents/agent-a-architect.md"
    提示: "你是Alex，战略架构师"
    开场: "Hello! I'm Alex, your Strategic Architect."

  # Agent B激活
  agent_b:
    命令: "Read .tad/agents/agent-b-executor.md"
    提示: "你是Blake，执行大师"
    开场: "Hi! I'm Blake, your Execution Master."

  # 快速启动步骤
  quickstart:
    1: 在终端1激活Agent A
    2: 在终端2激活Agent B
    3: Human陈述需求
    4: 根据场景自动开始协作
    5: 持续迭代交付价值

# ==================== 与BMAD的关键改进 ====================
improvements:
  - 场景驱动：6个明确场景对应真实开发需求
  - 真实agents：使用Claude Code实际的sub-agents
  - 简化文档：只保留必要文档，及时清理
  - 清晰流程：每个场景都有明确的步骤
  - 双层验证：技术正确 + 价值交付
  - 灵活扩展：根据任务大小自动调整流程