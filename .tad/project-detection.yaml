# TAD Framework - Project Type Detection Configuration
# Version: 1.2 (MCP Integration)
# Purpose: 智能检测项目类型并推荐对应的 Project-Layer MCP 工具

version: "1.2"
description: "Project type detection rules and MCP recommendation engine"
last_updated: "2025-01-30"

# ==================== 检测算法配置 ====================
detection_algorithm:
  method: "weighted_scoring"
  description: "基于关键词权重和文件模式的综合评分系统"

  scoring_formula: |
    Total Score = (Keyword Score × 0.6) + (File Pattern Score × 0.3) + (Tech Stack Score × 0.1)

    Confidence = Total Score / Max Possible Score

    If Confidence > Threshold:
      → Project Type Detected
    Else:
      → No Clear Type (skip Round 2.5)

  minimum_confidence: 0.5
  recommendation_threshold: 0.6

# ==================== 项目类型定义 ====================
project_types:

  # 1. Web 全栈应用
  web_fullstack:
    name: "Web Fullstack Application"
    name_cn: "Web 全栈应用"
    icon: "🌐"
    confidence_threshold: 0.7
    description: "现代 Web 应用(前端+后端+数据库)"

    keywords:
      tier1:  # 高权重关键词 (权重: 10)
        - "Next.js"
        - "React"
        - "Vue"
        - "Nuxt"
        - "SvelteKit"
        - "Remix"

      tier2:  # 中权重关键词 (权重: 7)
        - "web"
        - "网站"
        - "全栈"
        - "frontend"
        - "backend"
        - "前端"
        - "后端"
        - "API"
        - "REST"
        - "GraphQL"

      tier3:  # 低权重关键词 (权重: 5)
        - "Tailwind"
        - "CSS"
        - "响应式"
        - "用户界面"
        - "UI"
        - "路由"
        - "状态管理"
        - "服务端渲染"
        - "SSR"
        - "SSG"

    tech_stack_indicators:
      frameworks:
        - "Next.js"
        - "React"
        - "Vue"
        - "Angular"
        - "Svelte"

      backend:
        - "Node.js"
        - "Express"
        - "Fastify"
        - "Hono"
        - "tRPC"

      database:
        - "Supabase"
        - "PostgreSQL"
        - "MySQL"
        - "MongoDB"
        - "Prisma"

      deployment:
        - "Vercel"
        - "Netlify"
        - "Railway"
        - "Fly.io"

    file_patterns:
      high_confidence:  # 权重: 15
        - "package.json"
        - "next.config.js"
        - "next.config.ts"
        - "vite.config.js"
        - "vite.config.ts"

      medium_confidence:  # 权重: 10
        - "tsconfig.json"
        - "tailwind.config.js"
        - "postcss.config.js"
        - ".env.local"
        - "vercel.json"

      low_confidence:  # 权重: 5
        - "src/app/"
        - "src/pages/"
        - "src/components/"
        - "public/"
        - "styles/"

    recommended_mcps:
      priority_high:  # 强烈推荐
        - name: "supabase"
          reason: "数据库和后端服务"
          efficiency_gain: "85%"

        - name: "playwright"
          reason: "E2E 测试自动化"
          efficiency_gain: "80%"

      priority_medium:  # 推荐
        - name: "vercel"
          reason: "一键部署到生产环境"
          efficiency_gain: "90%"

        - name: "react-mcp"
          reason: "React 组件开发辅助"
          efficiency_gain: "60%"

    detection_confidence_levels:
      very_high: ">= 0.9"
      high: ">= 0.7"
      medium: ">= 0.5"
      low: "< 0.5"

  # 2. 数据科学/分析项目
  data_science:
    name: "Data Science/Analysis"
    name_cn: "数据科学/分析"
    icon: "📊"
    confidence_threshold: 0.6
    description: "数据分析、可视化、报表生成"

    keywords:
      tier1:  # 权重: 10
        - "数据分析"
        - "数据科学"
        - "data analysis"
        - "data science"
        - "pandas"
        - "jupyter"
        - "notebook"

      tier2:  # 权重: 7
        - "可视化"
        - "visualization"
        - "图表"
        - "报表"
        - "dashboard"
        - "仪表板"
        - "数据处理"
        - "ETL"
        - "清洗"

      tier3:  # 权重: 5
        - "CSV"
        - "Excel"
        - "SQL"
        - "查询"
        - "统计"
        - "分析"
        - "探索"
        - "EDA"

    tech_stack_indicators:
      languages:
        - "Python"
        - "R"
        - "Julia"

      libraries:
        - "pandas"
        - "numpy"
        - "matplotlib"
        - "seaborn"
        - "plotly"
        - "scipy"

      tools:
        - "Jupyter"
        - "JupyterLab"
        - "Google Colab"
        - "Databricks"

      databases:
        - "PostgreSQL"
        - "MySQL"
        - "BigQuery"
        - "Snowflake"

    file_patterns:
      high_confidence:  # 权重: 15
        - "*.ipynb"
        - "requirements.txt"
        - "environment.yml"
        - "Pipfile"

      medium_confidence:  # 权重: 10
        - "data/"
        - "datasets/"
        - "notebooks/"
        - "analysis/"
        - "*.csv"
        - "*.xlsx"

      low_confidence:  # 权重: 5
        - "visualizations/"
        - "reports/"
        - "scripts/"
        - "utils/"

    recommended_mcps:
      priority_high:
        - name: "jupyter"
          reason: "交互式数据分析环境"
          efficiency_gain: "90%"

        - name: "pandas-mcp"
          reason: "数据处理和清洗"
          efficiency_gain: "85%"

      priority_medium:
        - name: "antv-chart"
          reason: "专业数据可视化"
          efficiency_gain: "75%"

        - name: "postgres-mcp-pro"
          reason: "数据库性能优化"
          efficiency_gain: "70%"

  # 3. 机器学习项目
  machine_learning:
    name: "Machine Learning"
    name_cn: "机器学习"
    icon: "🤖"
    confidence_threshold: 0.8
    description: "机器学习模型训练、部署、MLOps"

    keywords:
      tier1:  # 权重: 10
        - "机器学习"
        - "深度学习"
        - "神经网络"
        - "machine learning"
        - "deep learning"
        - "neural network"
        - "模型训练"
        - "model training"
        - "AI"
        - "人工智能"

      tier2:  # 权重: 7
        - "PyTorch"
        - "TensorFlow"
        - "Keras"
        - "scikit-learn"
        - "HuggingFace"
        - "Transformers"
        - "LLM"
        - "GPT"
        - "BERT"

      tier3:  # 权重: 5
        - "预测"
        - "分类"
        - "回归"
        - "聚类"
        - "模型"
        - "超参数"
        - "优化"
        - "训练"
        - "推理"
        - "部署"

    tech_stack_indicators:
      frameworks:
        - "PyTorch"
        - "TensorFlow"
        - "JAX"
        - "MXNet"

      libraries:
        - "scikit-learn"
        - "XGBoost"
        - "LightGBM"
        - "CatBoost"
        - "transformers"
        - "diffusers"

      tools:
        - "MLflow"
        - "Weights & Biases"
        - "TensorBoard"
        - "Optuna"
        - "Ray Tune"

      platforms:
        - "HuggingFace Hub"
        - "SageMaker"
        - "Vertex AI"
        - "Azure ML"

    file_patterns:
      high_confidence:  # 权重: 15
        - "train.py"
        - "model.py"
        - "inference.py"
        - "requirements.txt"
        - "*.ipynb"

      medium_confidence:  # 权重: 10
        - "models/"
        - "checkpoints/"
        - "experiments/"
        - "configs/"
        - "*.pth"
        - "*.h5"
        - "*.onnx"

      low_confidence:  # 权重: 5
        - "data/"
        - "datasets/"
        - "logs/"
        - "wandb/"

    recommended_mcps:
      priority_high:
        - name: "jupyter"
          reason: "ML 实验和探索"
          efficiency_gain: "90%"

        - name: "optuna"
          reason: "自动超参数优化"
          efficiency_gain: "85%"

        - name: "huggingface"
          reason: "模型发现和加载"
          efficiency_gain: "90%"

      priority_medium:
        - name: "zenml"
          reason: "MLOps 管道管理"
          efficiency_gain: "75%"

        - name: "mlflow"
          reason: "实验追踪和模型管理"
          efficiency_gain: "70%"

  # 4. DevOps/基础设施项目
  devops:
    name: "DevOps/Infrastructure"
    name_cn: "DevOps/基础设施"
    icon: "⚙️"
    confidence_threshold: 0.7
    description: "容器化、CI/CD、云基础设施"

    keywords:
      tier1:  # 权重: 10
        - "DevOps"
        - "Kubernetes"
        - "K8s"
        - "Docker"
        - "容器"
        - "container"
        - "CI/CD"
        - "部署"
        - "deployment"

      tier2:  # 权重: 7
        - "基础设施"
        - "infrastructure"
        - "云"
        - "cloud"
        - "AWS"
        - "Azure"
        - "GCP"
        - "编排"
        - "orchestration"
        - "微服务"
        - "microservices"

      tier3:  # 权重: 5
        - "pod"
        - "helm"
        - "terraform"
        - "ansible"
        - "监控"
        - "日志"
        - "告警"
        - "负载均衡"
        - "自动扩展"

    tech_stack_indicators:
      container:
        - "Docker"
        - "Podman"
        - "containerd"

      orchestration:
        - "Kubernetes"
        - "Docker Swarm"
        - "Nomad"

      ci_cd:
        - "GitHub Actions"
        - "GitLab CI"
        - "Jenkins"
        - "CircleCI"
        - "ArgoCD"

      iac:
        - "Terraform"
        - "Pulumi"
        - "CloudFormation"
        - "Ansible"

      cloud:
        - "AWS"
        - "Azure"
        - "GCP"
        - "DigitalOcean"

    file_patterns:
      high_confidence:  # 权重: 15
        - "Dockerfile"
        - "docker-compose.yml"
        - "kubernetes/"
        - "k8s/"
        - "*.tf"

      medium_confidence:  # 权重: 10
        - ".github/workflows/"
        - ".gitlab-ci.yml"
        - "helm/"
        - "charts/"
        - "terraform/"

      low_confidence:  # 权重: 5
        - "manifests/"
        - "deployments/"
        - "scripts/"
        - "ansible/"

    recommended_mcps:
      priority_high:
        - name: "kubernetes"
          reason: "K8s 集群管理和部署"
          efficiency_gain: "85%"

        - name: "docker"
          reason: "容器构建和管理"
          efficiency_gain: "80%"

      priority_medium:
        - name: "aws"
          reason: "AWS 资源管理"
          efficiency_gain: "75%"

        - name: "terminal"
          reason: "Shell 命令执行"
          efficiency_gain: "70%"

        - name: "netdata"
          reason: "实时监控和告警"
          efficiency_gain: "65%"

  # 5. 创意/多媒体项目
  creative:
    name: "Creative/Multimedia"
    name_cn: "创意/多媒体"
    icon: "🎨"
    confidence_threshold: 0.7
    description: "设计、视频、音频、创意内容"

    keywords:
      tier1:  # 权重: 10
        - "设计"
        - "design"
        - "Figma"
        - "视频"
        - "video"
        - "音频"
        - "audio"
        - "创意"
        - "creative"

      tier2:  # 权重: 7
        - "UI/UX"
        - "界面设计"
        - "多媒体"
        - "multimedia"
        - "编辑"
        - "剪辑"
        - "渲染"
        - "特效"

      tier3:  # 权重: 5
        - "Photoshop"
        - "PS"
        - "Premiere"
        - "PR"
        - "After Effects"
        - "AE"
        - "Illustrator"
        - "AI"
        - "原型"
        - "mockup"

    tech_stack_indicators:
      design_tools:
        - "Figma"
        - "Sketch"
        - "Adobe XD"
        - "Framer"

      video_tools:
        - "Premiere Pro"
        - "Final Cut Pro"
        - "DaVinci Resolve"
        - "After Effects"

      audio_tools:
        - "Audacity"
        - "Pro Tools"
        - "Logic Pro"
        - "Ableton"

      graphics:
        - "Photoshop"
        - "Illustrator"
        - "GIMP"
        - "Inkscape"

    file_patterns:
      high_confidence:  # 权重: 15
        - "*.fig"
        - "*.psd"
        - "*.ai"
        - "*.prproj"
        - "*.aep"

      medium_confidence:  # 权重: 10
        - "design/"
        - "assets/"
        - "mockups/"
        - "prototypes/"

      low_confidence:  # 权重: 5
        - "images/"
        - "videos/"
        - "audio/"
        - "exports/"

    recommended_mcps:
      priority_high:
        - name: "figma"
          reason: "设计转代码自动化"
          efficiency_gain: "85%"

        - name: "video-audio-mcp"
          reason: "视频音频编辑自动化"
          efficiency_gain: "80%"

      priority_medium:
        - name: "adobe-mcp"
          reason: "Adobe 工具集成"
          efficiency_gain: "75%"

# ==================== 检测流程定义 ====================
detection_workflow:
  trigger_timing: "Round 2.5 (after tech stack confirmed in Round 2)"

  step1_collect_data:
    description: "收集检测所需的所有数据"
    data_sources:
      - "Round 1-2 用户对话中的关键词"
      - "用户明确提到的技术栈"
      - "项目目录中的文件列表 (if exists)"
      - "package.json 或 requirements.txt 内容 (if exists)"

  step2_keyword_analysis:
    description: "分析关键词并计算权重分数"
    algorithm: |
      FOR each project_type:
        score = 0
        FOR each keyword mentioned by user:
          IF keyword in tier1:
            score += 10
          ELIF keyword in tier2:
            score += 7
          ELIF keyword in tier3:
            score += 5

        keyword_score[project_type] = score

  step3_file_pattern_check:
    description: "检查文件模式 (如果项目已存在)"
    algorithm: |
      FOR each project_type:
        score = 0
        FOR each file in project:
          IF file matches high_confidence pattern:
            score += 15
          ELIF file matches medium_confidence pattern:
            score += 10
          ELIF file matches low_confidence pattern:
            score += 5

        file_score[project_type] = score

  step4_tech_stack_verification:
    description: "验证明确提到的技术栈"
    algorithm: |
      FOR each project_type:
        match_count = 0
        FOR each tech mentioned by user:
          IF tech in tech_stack_indicators:
            match_count += 1

        tech_score[project_type] = match_count * 5

  step5_calculate_confidence:
    description: "计算最终置信度"
    formula: |
      total_score = (keyword_score × 0.6) + (file_score × 0.3) + (tech_score × 0.1)

      max_possible_score = (max_tier1_keywords × 10 × 0.6) +
                          (max_file_patterns × 15 × 0.3) +
                          (max_tech_matches × 5 × 0.1)

      confidence = total_score / max_possible_score

      IF confidence >= project_type.confidence_threshold:
        → DETECTED
      ELSE:
        → NOT DETECTED

  step6_recommendation:
    description: "基于检测结果推荐 MCP 工具"
    action: |
      IF project_type detected:
        1. Display project type name and confidence
        2. Show icon and description
        3. List recommended MCPs (priority_high first)
        4. Explain efficiency gains
        5. Offer installation options (0-2)
      ELSE:
        Skip Round 2.5, continue to Round 3

# ==================== 特殊情况处理 ====================
edge_cases:
  multiple_types_detected:
    description: "检测到多个项目类型"
    handling: |
      1. 选择置信度最高的类型
      2. 如果置信度相近 (< 0.1 差距):
         - 显示多个检测结果
         - 让用户选择主要类型
      3. 可以安装多个类型的 MCP 工具

  no_type_detected:
    description: "没有检测到明确的项目类型"
    handling: |
      1. 跳过 Round 2.5
      2. 直接继续到 Round 3
      3. 记录: "Project type: Generic/Mixed"
      4. 只使用 Core Layer MCP 工具

  new_project_no_files:
    description: "全新项目,没有任何文件"
    handling: |
      1. 仅依赖关键词和技术栈检测
      2. file_score = 0
      3. 降低 confidence_threshold (-0.1)
      4. 增加关键词权重 (0.7 instead of 0.6)

  user_disagrees:
    description: "用户不同意检测结果"
    handling: |
      1. 显示所有 5 种项目类型
      2. 让用户手动选择
      3. 记录: "User overrode detection: [type]"
      4. 根据用户选择推荐 MCP

# ==================== 检测结果输出格式 ====================
output_format:
  detection_message: |
    ---
    🎯 Project Type Detected: {project_type.icon} {project_type.name_cn}
    Confidence: {confidence}%

    Based on your requirements, I recommend installing these MCP tools:

    📦 Recommended Project-Layer MCPs:
    {FOR each mcp in priority_high}
    {priority}. ✨ {mcp.name} - {mcp.reason}
       Efficiency Gain: {mcp.efficiency_gain}
    {END FOR}

    {IF priority_medium exists}
    Additional Options:
    {FOR each mcp in priority_medium}
    {priority}. ⭐ {mcp.name} - {mcp.reason}
       Efficiency Gain: {mcp.efficiency_gain}
    {END FOR}
    {END IF}

    These tools will significantly improve development efficiency:
    - {benefit_1}
    - {benefit_2}
    - {benefit_3}

    Installation takes ~20-30 seconds.

    Install Options:
    0. Install all recommended (fastest) ←
    1. Let me choose which to install
    2. Skip for now (can install later with: tad mcp install)

    Select 0-2:
    ---

  no_detection_message: |
    [Internal Note: Project type unclear, skipping MCP recommendation]
    [Continue to Round 3]

# ==================== 日志和追踪 ====================
logging:
  enabled: true
  location: ".tad/logs/project_detection.log"
  format: "[{timestamp}] Detection: {project_type} | Confidence: {confidence} | User Decision: {decision}"

  tracked_data:
    - "Keywords mentioned"
    - "Files checked"
    - "Tech stack identified"
    - "Confidence scores per type"
    - "Final decision"
    - "MCPs recommended"
    - "User selection"

# ==================== 持续改进 ====================
improvement:
  feedback_collection:
    enabled: true
    questions:
      - "Was the project type detection accurate?"
      - "Were the recommended MCPs useful?"
      - "Should we adjust the detection threshold?"

  tuning_recommendations:
    - "Review logs weekly"
    - "Adjust keyword weights based on accuracy"
    - "Update tech_stack_indicators with new tools"
    - "Fine-tune confidence thresholds"
